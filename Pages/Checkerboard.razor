@using CheckerBlazorServer.Constant
@using CheckerBlazorServer.CheckerService.Model.BoardModelNS
@using CheckerService.Model.CheckerModelNS
@using System.Text
@using CheckerBlazorServer.CheckerService
@using CheckerBlazorServer.CheckerRepositoryNS

@code {

    [Inject]
    public ICheckerService CheckerService { get; set; }
    [Inject]
    public ICheckerRepository CheckerRepository { get; set; }

    private CheckerModel? selectedChecker;

    public Checkerboard()
    {

    }

    private void ClickWithCheckerOn(CheckerModel checker)
    {
        var result = CheckerService.ProbableSteps(checker);
        selectedChecker = checker;
        foreach (var field in CheckerRepository.Board)
        {
            field.FieldAttributes.Remove(FieldAttribute.Highlighted);
        }

        foreach (var probableStep in result)
        {
            CheckerRepository.Board[probableStep.Row, probableStep.Column].FieldAttributes.Add(FieldAttribute.Highlighted);

        }


        StateHasChanged();
    }

    private void ClickWithoutChecker(int intendedRow, int intendedColumn)
    {
        foreach (var field in CheckerRepository.Board)
        {
            field.FieldAttributes.Remove(FieldAttribute.Highlighted);
        }

        if (selectedChecker is null)
        {
            return;
        }

        this.CheckerService.MoveChecker(selectedChecker, intendedRow, intendedColumn);

        StateHasChanged();
    }

    private string StyleForClass(HashSet<FieldAttribute> fieldAttributes)
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("checker ");
        if (fieldAttributes.Contains(FieldAttribute.Highlighted))
            sb.Append("highlighted");

        return sb.ToString();
    }

}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-sm-7 d-flex">
            <table class="table table-bordered">
                @for (int i = 0; i < CheckerRepository.Board.GetLength(0); i++)
                {
                    int localI = i;
                    <tr>
                        @for (int j = 0; j < CheckerRepository.Board.GetLength(1); j++)
                        {
                            var localJ = j;
                            var field = CheckerRepository.Board[i, j];
                            <td>
                                <div id="@($"cellId{i}-{j}")" class="content text-center">
                                    @if (field.BoardFieldType == BoardFieldType.AlwaysEmpty)
                                    {
                                        <div>
                                            X
                                        </div>
                                    }
                                    else if (field.Checker == null)
                                    {
                                        <div class="@(StyleForClass(field.FieldAttributes))" @onclick="()=>ClickWithoutChecker(localI, localJ)">
                                            O
                                        </div>
                                    }
                                    else if (field.Checker.CheckerColor == CheckerColor.White)
                                    {
                                        <div @onclick="() => ClickWithCheckerOn(field.Checker)">
                                            w
                                        </div>
                                    }
                                    else if (field.Checker.CheckerColor == CheckerColor.Black)
                                    {
                                        <div @onclick="() => ClickWithCheckerOn(field.Checker)">
                                            b
                                        </div>
                                    }
                                </div>
                            </td>

                        }
                    </tr>
                }
            </table>
        </div>
    </div>
</div>