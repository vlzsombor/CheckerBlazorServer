@using CheckerBlazorServer.CheckerService
@using CheckerBlazorServer.CheckerRepositoryNS
@using Microsoft.AspNetCore.SignalR.Client
@using Checker.Server.HubNS;
@using CheckerBlazorServer.CheckerService.Model.CheckerModelNS
@using CheckerBlazorServer.CheckerService.Model.BoardModelNS
@inject NavigationManager NavigationManager
@inject TableManager tableManager

@page "/"


@code {

    private HubConnection? hubConnection;
    private string tableId;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/multiPlayerHub"))
            .Build();

    }

    //async Task CreateGame()
    //{
    //    await hubConnection.StartAsync();
    //    this.tableId = Guid.NewGuid().ToString();
    //    await hubConnection.SendAsync("JoinTable", tableId);
    //    inGame = true;
    //    Navigate(tableId);

    //}

    //async Task JoinGame(string tableId)
    //{
    //    this.tableId = tableId;
    //    await hubConnection.StartAsync();
    //    await hubConnection.SendAsync("JoinTable", tableId);
    //    inGame = true;
    //    Navigate(tableId);
    //}


    void Navigate(string tableId)
    {
        NavigationManager.NavigateTo($"./game/{tableId}");
    }

    private bool inGame = false;
    [Inject]
    public ICheckerService CheckerService { get; set; }



}
@if (inGame)
{
    @*<Checkerboard hubConnection="hubConnection" />*@
}
else
{
    <button id="createGame" @onclick="()=>Navigate(Guid.NewGuid().ToString())">Create Game</button>

    @foreach (string table in tableManager.Tables.Where(t => t.Value < 2).Select(x => x.Key))
    {
        <button id="joinTable" @onclick="()=>Navigate(table)">Join Table @table</button>
    }

}